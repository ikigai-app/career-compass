type Query {
  getUser(userName: String!): User
  queryUser(
    filter: UserFilter
    order: UserOrder
    first: Int
    offset: Int
  ): [User]
}

type Mutation {
  addUser(input: AddUserInput!): User
}

input AddUserInput {
  userName: String!
  resumeData: String
}

type User {
  userName: String!
  resumeData: String
}

input UserFilter {
  userName: StringHashFilter
}

input StringHashFilter {
  eq: String
}

enum UserOrderable {
  userName
}

input UserOrder {
  asc: UserOrderable
  desc: UserOrderable
  then: UserOrder
}
