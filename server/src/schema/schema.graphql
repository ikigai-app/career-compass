type Query {
  queryUser(
    # filter: UserFilter
    # order: UserOrder
    first: Int
    offset: Int
  ): [User]
}

type Mutation {
  addUser(input: AddUserInput!): User
}

type User {
  userName: String!
  ContactInformation: ContactInformation
}

type ContactInformation {
  CandidateName: CandidateName
  Telephones: [Telephones]
  EmailAddresses: [String]
  WebAddresses: [WebAddresses]
}

type CandidateName {
  FormattedName: String
  GivenName: String
  FamilyName: String
}

type Telephones {
  Raw: String
  Normalized: String
  InternationalCountryCode: String
  AreaCityCode: String
  SubscriberNumber: String
}

type WebAddresses {
  Address: String
  Type: String
}

input AddUserInput {
  userName: String!
  ContactInformation: ContactInformationInput
}

input ContactInformationInput {
  CandidateName: CandidateNameInput
  Telephones: [TelephonesInput]
  EmailAddresses: [String]
  WebAddresses: [WebAddressesInput]
}

input CandidateNameInput {
  FormattedName: String
  GivenName: String
  FamilyName: String
}

input TelephonesInput {
  Raw: String
  Normalized: String
  InternationalCountryCode: String
  AreaCityCode: String
  SubscriberNumber: String
}

input WebAddressesInput {
  Address: String
  Type: String
}

# input UserFilter {
#   userName: StringHashFilter
# }

# input StringHashFilter {
#   eq: String
# }

# enum UserOrderable {
#   userName
# }

# input UserOrder {
#   asc: UserOrderable
#   desc: UserOrderable
#   then: UserOrder
# }
