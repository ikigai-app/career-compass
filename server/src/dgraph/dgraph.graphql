# Using transform tool to convert JSON into graphql https://transform.tools/json-to-graphql
# alternative if transform not work https://github.com/walmartlabs/json-to-simple-graphql-schema . But, not accurate as transform tools.

# !imp: plz update  server/src/schema/schema.graphql whenever any changes done on this file

type User
  @generate(
    query: { get: true, query: true, aggregate: false }
    mutation: { add: true, update: true, delete: true }
    subscription: false
  ) {
  userName: String! @id
  SovrenResponse: SovrenResponse
  InvalidSovrenJSON: String
}

type TimedOutAtMilliseconds
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Value: Int
}

type ParsingMetadata
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  ElapsedMilliseconds: Int
  TimedOut: Boolean
  LicenseSerialNumber: String
  TimedOutAtMilliseconds: TimedOutAtMilliseconds
}

type Conversions
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  PDF: String
  HTML: String
  RTF: String
  CandidateImage: String
  CandidateImageExtension: String
}

type ConversionMetadata
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  DetectedType: String
  SuggestedFileExtension: String
  OutputValidityCode: String
  ElapsedMilliseconds: Int
}

type ReservedData
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  OtherData: [String]
  Urls: [String]
  EmailAddresses: [String]
  Names: [String]
  Phones: [String]
}

type SectionIdentifiers
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  SectionType: String
  Id: String
}

type Findings
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  QualityCode: String
  Message: String
  SectionIdentifiers: [SectionIdentifiers]
}

type ResumeQuality
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Level: String
  Findings: [Findings]
}

type FoundSections
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  FirstLineNumber: Int
  LastLineNumber: Int
  SectionType: String
  HeaderTextFound: String
}

type ResumeMetadata
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  PlainText: String
  DocumentLanguage: String
  DocumentCulture: String
  ParserSettings: String
  DocumentLastModified: String
  SovrenSignature: [String]
  ReservedData: ReservedData
  ResumeQuality: [ResumeQuality]
  FoundSections: [FoundSections]
}

type EndDate
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Date: String
  IsCurrentDate: Boolean
  FoundYear: Boolean
  FoundMonth: Boolean
  FoundDay: Boolean
}

type StartDate
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Date: String
  IsCurrentDate: Boolean
  FoundYear: Boolean
  FoundMonth: Boolean
  FoundDay: Boolean
}

type Trainings
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Text: String
  Entity: String
  EndDate: EndDate
  StartDate: StartDate
  Qualifications: [String]
}

type Training
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Text: String
  Trainings: [Trainings]
}

type WebAddresses
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Address: String
  Type: String
}

type GeoCoordinates
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Latitude: Int
  Longitude: Int
  Source: String
}

type Location
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  CountryCode: String
  PostalCode: String
  Municipality: String
  GeoCoordinates: GeoCoordinates
  StreetAddressLines: [String]
  Regions: [String]
}

type ReferenceName
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  FormattedName: String
  Prefix: String
  GivenName: String
  Moniker: String
  MiddleName: String
  FamilyName: String
  Suffix: String
}

type References
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Title: String
  Company: String
  Type: String
  WebAddresses: [WebAddresses]
  EmailAddresses: [String]
  Telephones: [Telephones]
  Location: Location
  ReferenceName: ReferenceName
}

type SecurityCredentials
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Name: String
  FoundInContext: String
}

type Service
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Name: String
  Branch: String
  Rank: String
}

type MilitaryExperience
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Country: String
  FoundInContext: String
  EndDate: EndDate
  StartDate: StartDate
  Service: Service
}

type LanguageCompetencies
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Language: String
  LanguageCode: String
  FoundInContext: String
}

type Associations
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Organization: String
  Role: String
  FoundInContext: String
}

type Licenses
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Name: String
  MatchedFromList: Boolean
}

type Certifications
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Name: String
  MatchedFromList: Boolean
}

type ChildrenLastUsed
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Value: String
}

type ChildrenMonthsExperience
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Value: Int
}

type LastUsed
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Value: String
}

type MonthsExperience
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Value: Int
}

type FoundIn
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  SectionType: String
  Id: String
}

type Variations
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Id: String
  Name: String
  ExistsInText: Boolean
  FoundIn: [FoundIn]
  LastUsed: LastUsed
  MonthsExperience: MonthsExperience
}

type Skills
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Id: String
  Name: String
  ExistsInText: Boolean
  ChildrenLastUsed: ChildrenLastUsed
  ChildrenMonthsExperience: ChildrenMonthsExperience
  LastUsed: LastUsed
  MonthsExperience: MonthsExperience
  Variations: [Variations]
  FoundIn: [FoundIn]
}

type SubTaxonomies
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  PercentOfOverall: Int
  PercentOfParent: Int
  SubTaxonomyId: String
  SubTaxonomyName: String
  Skills: [Skills]
}

type Taxonomies
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Id: String
  Name: String
  PercentOfOverall: Int
  SubTaxonomies: [SubTaxonomies]
}

type SkillsData
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Root: String
  Taxonomies: [Taxonomies]
}

type Bullets
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Type: String
  Text: String
}

type NumberEmployeesSupervised
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Value: Int
}

type JobTitle
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Raw: String
  Normalized: String
  Probability: String
  Variations: [String]
}

type OtherFoundName
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Raw: String
  Normalized: String
}

type Name
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Probability: String
  Raw: String
  Normalized: String
}

type Employer
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Location: Location
  OtherFoundName: OtherFoundName
  Name: Name
}

type ExperienceSummary
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Description: String
  MonthsOfWorkExperience: Int
  MonthsOfManagementExperience: Int
  ExecutiveType: String
  AverageMonthsPerEmployer: Int
  FulltimeDirectHirePredictiveIndex: Int
  ManagementStory: String
  CurrentManagementLevel: String
  ManagementScore: Int
  AttentionNeeded: String
}

type EmploymentHistory
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Positions: [Positions]
  ExperienceSummary: ExperienceSummary
}

type Graduated
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Value: Boolean
}

type LastEducationDate
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Date: String
  IsCurrentDate: Boolean
  FoundYear: Boolean
  FoundMonth: Boolean
  FoundDay: Boolean
}

type Gpa
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Score: String
  ScoringSystem: String
  MaxScore: String
  MinimumScore: String
  NormalizedScore: Int
}

type Degree
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Type: String
  Name: Name
}

type SchoolName
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Raw: String
  Normalized: String
}

type EducationDetails
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Id: String
  Text: String
  SchoolType: String
  Graduated: Graduated
  LastEducationDate: LastEducationDate
  GPA: Gpa
  Minors: [String]
  Majors: [String]
  Degree: Degree
  Location: Location
  SchoolName: SchoolName
}

type HighestDegree
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Type: String
  Name: Name
}

type Education
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  EducationDetails: [EducationDetails]
  HighestDegree: HighestDegree
}

type RequiredSalary
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Currency: String
  Amount: Int
}

type NationalIdentities
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Number: String
  Phrase: String
}

type DateOfBirth
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Date: String
  IsCurrentDate: Boolean
  FoundYear: Boolean
  FoundMonth: Boolean
  FoundDay: Boolean
}

type CurrentSalary
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Currency: String
  Amount: Int
}

type PersonalAttributes
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Availability: String
  Birthplace: String
  CurrentLocation: String
  DrivingLicense: String
  FamilyComposition: String
  FathersName: String
  Gender: String
  HukouCity: String
  HukouArea: String
  MaritalStatus: String
  MothersMaidenName: String
  MotherTongue: String
  Nationality: String
  PassportNumber: String
  PreferredLocation: String
  VisaStatus: String
  WillingToRelocate: String
  RequiredSalary: RequiredSalary
  NationalIdentities: [NationalIdentities]
  DateOfBirth: DateOfBirth
  CurrentSalary: CurrentSalary
}

type Telephones
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Raw: String
  Normalized: String
  InternationalCountryCode: String
  AreaCityCode: String
  SubscriberNumber: String
}

type CandidateName
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  FormattedName: String
  Prefix: String
  GivenName: String
  Moniker: String
  MiddleName: String
  FamilyName: String
  Suffix: String
}

type ContactInformation
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  WebAddresses: [WebAddresses]
  Location: Location
  EmailAddresses: [String]
  Telephones: [Telephones]
  CandidateName: CandidateName
}

type RedactedResumeData
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  ProfessionalSummary: String
  Objective: String
  CoverLetter: String
  QualificationsSummary: String
  Hobbies: String
  Patents: String
  Publications: String
  SpeakingEngagements: String
  UserDefinedTags: [String]
  ResumeMetadata: ResumeMetadata
  Training: Training
  Achievements: [String]
  References: [References]
  SecurityCredentials: [SecurityCredentials]
  MilitaryExperience: [MilitaryExperience]
  LanguageCompetencies: [LanguageCompetencies]
  Associations: [Associations]
  Licenses: [Licenses]
  Certifications: [Certifications]
  SkillsData: [SkillsData]
  EmploymentHistory: EmploymentHistory
  Education: Education
  PersonalAttributes: PersonalAttributes
  ContactInformation: ContactInformation
}

type Positions
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Id: String
  IsSelfEmployed: Boolean
  IsCurrent: Boolean
  JobType: String
  TaxonomyName: String
  SubTaxonomyName: String
  JobLevel: String
  # TaxonomyPercentage: String
  TaxonomyPercentage: Int
  Description: String
  Bullets: [Bullets]
  NumberEmployeesSupervised: NumberEmployeesSupervised
  EndDate: EndDate
  StartDate: StartDate
  JobTitle: JobTitle
  RelatedToByCompanyName: [String]
  RelatedToByDates: [String]
  Employer: Employer
}

type ResumeData
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  ProfessionalSummary: String
  Objective: String
  CoverLetter: String
  QualificationsSummary: String
  Hobbies: String
  Patents: String
  Publications: String
  SpeakingEngagements: String
  UserDefinedTags: [String]
  ResumeMetadata: ResumeMetadata
  Training: Training
  Achievements: [String]
  References: [References]
  SecurityCredentials: [SecurityCredentials]
  MilitaryExperience: [MilitaryExperience]
  LanguageCompetencies: [LanguageCompetencies]
  Associations: [Associations]
  Licenses: [Licenses]
  Certifications: [Certifications]
  SkillsData: [SkillsData]
  EmploymentHistory: EmploymentHistory
  Education: Education
  PersonalAttributes: PersonalAttributes
  ContactInformation: ContactInformation
}

type IndexingResponse
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Code: String
  Message: String
}

type GeocodeResponse
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Code: String
  Message: String
}

type ParsingResponse
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Code: String
  Message: String
}

type Value
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  ParsingMetadata: ParsingMetadata
  Conversions: Conversions
  ConversionMetadata: ConversionMetadata
  RedactedResumeData: RedactedResumeData
  ResumeData: ResumeData
  IndexingResponse: IndexingResponse
  GeocodeResponse: GeocodeResponse
  ParsingResponse: ParsingResponse
}

type CustomerDetails
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  AccountId: String
  Name: String
  IPAddress: String
  Region: String
  CreditsRemaining: Int
  CreditsUsed: Int
  ExpirationDate: String
  MaximumConcurrentRequests: Int
}

type Info
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Code: String
  Message: String
  TransactionId: String
  EngineVersion: String
  ApiVersion: String
  TotalElapsedMilliseconds: Int
  CustomerDetails: CustomerDetails
}

type SovrenResponse
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  Value: Value
  Info: Info
}

type Occupation
  @generate(
    query: { query: true, get: true, aggregate: false }
    mutation: { add: true, update: true, delete: true }
    subscription: false
  ) {
  id: ID!
  name: String
  description: String
  connectPeople: [ConnectPeople]
  jobDescription: [JobDescription]
  experience: [Experience]
}

type ConnectPeople
  @generate(
    query: { get: true, query: true, aggregate: false }
    mutation: { add: true, update: true, delete: true }
    subscription: false
  ) {
  id: ID!
  name: String
  description: String
  profilePic: String
  socialMedia: [SocialMedia]
  occupationType: Occupation @hasInverse(field: connectPeople)
}

type SocialMedia
  @generate(
    query: { get: true, query: true, aggregate: false }
    mutation: { add: true, update: true, delete: true }
    subscription: false
  ) {
  id: ID!
  type: String
  url: String
  accountHolder: ConnectPeople @hasInverse(field: socialMedia)
}

type JobDescription
  @generate(
    query: { get: true, query: true, aggregate: false }
    mutation: { add: true, update: true, delete: true }
    subscription: false
  ) {
  id: ID!
  roles: [Roles]
  skills1: [Skills1]
  requirements: [Requirements]
  occupationType: Occupation @hasInverse(field: jobDescription)
}

type Roles
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  id: ID!
  role: String
}

type Skills1
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  id: ID!
  skill1: String
}

type Requirements
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, update: false, delete: false }
    subscription: false
  ) {
  id: ID!
  requirement: String
}

type Experience
  @generate(
    query: { get: true, query: true, aggregate: false }
    mutation: { add: true, update: true, delete: true }
    subscription: false
  ) {
  id: ID!
  url: String
  description: String
  type: String
  occupationType: Occupation @hasInverse(field: experience)
}
