type Query {
  # getUser(userName: String!): User
  queryUser(
    # filter: UserFilter
    # order: UserOrder
    first: Int
    offset: Int
  ): [User]
  # queryContactInformation(first: Int, offset: Int): [ContactInformation]
  # queryCandidateName(first: Int, offset: Int): [CandidateName]
}

type Mutation {
  # addUser(input: AddUserInput!): User
  # addContactInformation(input: AddContactInformationInput!): ContactInformation
  # addCandidateName(input: [CandidateNameInput!]!): CandidateName
  addCandidateName(input: AddCandidateNameInput!): CandidateName
}

type User {
  userName: String!
  ContactInformation: ContactInformation
}

type ContactInformation {
  CandidateName: CandidateName
  Telephones: [Telephones]
  EmailAddresses: [String]
  WebAddresses: [WebAddresses]
}

type CandidateName {
  FormattedName: String
  GivenName: String
  FamilyName: String
}

type Telephones {
  Raw: String
  Normalized: String
  InternationalCountryCode: String
  AreaCityCode: String
  SubscriberNumber: String
}

type WebAddresses {
  Address: String
  Type: String
}

# input AddContactInformationInput {
#   # CandidateName: CandidateNameInput
# }

input AddCandidateNameInput {
  FormattedName: String
  GivenName: String
  FamilyName: String
}

# input ContactInformationFilter {
#   userName: StringHashFilter
# }

# input AddUserInput {
#   userName: String!
#   resumeData: String
# }

# type User {
#   userName: String!
#   resumeData: String
# }

# input UserFilter {
#   userName: StringHashFilter
# }

# input StringHashFilter {
#   eq: String
# }

# enum UserOrderable {
#   userName
# }

# input UserOrder {
#   asc: UserOrderable
#   desc: UserOrderable
#   then: UserOrder
# }
